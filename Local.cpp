#include "local.h"
#include <cstdint>
#include <Windows.h>
#include <Vector3.h>
#include <math.h>
#include "offsets.h"


Local* Local::Get()
{
	static uint32_t clientModule = (uint32_t)(GetModuleHandle("client_panorama.dll"));
	static Local* localplayer = (Local*)(clientModule + hazedumper::signatures::dwLocalPlayer);
	if (localplayer) {
		return localplayer;

	}
	else
	{
		OutputDebugStringW(L"My output string.");
			return FALSE;

	}
}

Vector3* Local::GetOrigin()
{
	return (Vector3*)(*(uintptr_t*)this + hazedumper::netvars::m_vecOrigin);
}

Vector3* Local::GetViewOffset()
{
	return (Vector3*)(*(uintptr_t*)this + hazedumper::netvars::m_vecViewOffset);
}
int* Local::GetHealth()
{
	return (int*)(*(uintptr_t*)this + hazedumper::netvars::m_iHealth);

}
int* Local::GetTeam()
{
	return (int*)(*(uintptr_t*)this + hazedumper::netvars::m_iTeamNum);
}

float Local::GetDistance(Vector3* other)
{
	Vector3* myPosition = GetOrigin();
	Vector3 delta = Vector3(other->x - myPosition->x, other->y - myPosition->y, other->z - myPosition->z);

	return sqrt(delta.x * delta.x + delta.y * delta.y + delta.z * delta.z);

}

double PI = 3.14159265358;

void Local::AimAt(Vector3* target)
{
	static uint32_t engineModule = (uint32_t)GetModuleHandle("engine.dll");
	static Vector3* viewAngles = (Vector3*)(*(uint32_t*)(engineModule + hazedumper::signatures::dwClientState_ViewAngles));

	Vector3 origin = *GetOrigin();
	Vector3 viewOffset = *GetViewOffset();
	Vector3* mypos = &(origin + viewOffset);


	Vector3 deltaVec = { target->x - mypos->x , target->y - mypos->y , target->z - mypos->z };
	float deltaVecLength = sqrt(deltaVec.x * deltaVec.x + deltaVec.y * deltaVec.y + deltaVec.z * deltaVec.z);
	float pitch = -asin(deltaVec.z / deltaVecLength) * (180 / PI);
	float yaw = atan2(deltaVec.y, deltaVec.x) * (180 / PI);

	viewAngles->x = pitch;
	viewAngles->y = yaw; 
}